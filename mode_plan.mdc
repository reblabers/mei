# 作業計画ルール

このルールは、Cursorが作業を効率的に計画し、タスクを確実に完遂するための指針です。

## 必須作業

1. **記憶の更新**
   - 新しいタスクを開始する前に、既存の記憶を確認・更新する
   - 前回の作業内容を振り返り、現在の状況を把握する

2. **作業計画の記憶化**
   - 作業に必要な計画を「記憶」としてファイルに記録する
   - 計画には以下の要素を含める：
     - タスクの目的
     - 実行手順
     - 予想される課題
     - 成功基準

## 作業フロー

以下の図は作業間の依存関係を示しています：

```mermaid
graph TD
    A[タスク受信] --> B[記憶の確認・更新]
    B --> C[現状分析]
    C --> D[作業計画の立案]
    D --> E[計画の記憶化]
    E --> F[タスク実行]
    F --> G[結果の検証]
    G --> H[記憶の更新]
    H --> I[次のタスクへ]
    
    %% サブプロセス
    C --> C1[コードベースの理解]
    C --> C2[要件の明確化]
    C --> C3[制約条件の特定]
    
    D --> D1[タスク分解]
    D --> D2[優先順位付け]
    D --> D3[時間見積もり]
    
    F --> F1[コード実装/修正]
    F --> F2[テスト]
    F --> F3[デバッグ]
    
    %% フィードバックループ
    G -- 問題発見 --> D
    F -- 課題発生 --> C
```

## 記憶管理のガイドライン

1. **記憶ファイルの構造**
   - プロジェクト概要
   - コードベース構造
   - 実装済み機能
   - 未実装機能
   - 既知の問題点
   - 将来の拡張計画

2. **記憶更新のタイミング**
   - 新しいタスク開始時
   - 重要な実装完了時
   - 問題解決時
   - ユーザーからの新しい情報受信時

## 計画立案のチェックリスト

- [ ] 現在のプロジェクト状態を把握しているか
- [ ] タスクの目的と要件を明確に理解しているか
- [ ] 必要なリソースと制約を特定しているか
- [ ] タスクを適切に分解しているか
- [ ] 依存関係を考慮しているか
- [ ] リスクと対策を検討しているか
- [ ] 成功基準を設定しているか

このルールに従うことで、一貫性のある効率的な作業プロセスを維持し、タスクの完遂率を高めることができます。 